// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    username,
    city,
    country,
    profile,
    profile_medium
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, first_name, last_name, username, city, country, profile, profile_medium, creation_timestamp
`

type CreateUserParams struct {
	FirstName     string         `json:"first_name"`
	LastName      string         `json:"last_name"`
	Username      string         `json:"username"`
	City          sql.NullString `json:"city"`
	Country       sql.NullString `json:"country"`
	Profile       sql.NullString `json:"profile"`
	ProfileMedium sql.NullString `json:"profile_medium"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.City,
		arg.Country,
		arg.Profile,
		arg.ProfileMedium,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.City,
		&i.Country,
		&i.Profile,
		&i.ProfileMedium,
		&i.CreationTimestamp,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, username, city, country, profile, profile_medium, creation_timestamp FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.City,
		&i.Country,
		&i.Profile,
		&i.ProfileMedium,
		&i.CreationTimestamp,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, username, city, country, profile, profile_medium, creation_timestamp FROM users
WHERE city = $1 OR country = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListUsersParams struct {
	City    sql.NullString `json:"city"`
	Country sql.NullString `json:"country"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.City,
		arg.Country,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.City,
			&i.Country,
			&i.Profile,
			&i.ProfileMedium,
			&i.CreationTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
